import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/nextauth-combined';
import fs from 'fs';
import path from 'path';

export const runtime = 'nodejs';

function serializeValue(value) {
  const v = String(value ?? '');
  // Always wrap in double quotes; escape existing quotes
  return `"${v.replace(/"/g, '\\"')}"`;
}

function updateEnvContent(existing, updates) {
  const lines = existing.split(/\r?\n/);
  const keys = Object.keys(updates);
  const seen = new Set();
  const out = lines.map((line) => {
    const m = line.match(/^([A-Z0-9_]+)=(.*)$/);
    if (!m) return line;
    const key = m[1];
    if (keys.includes(key)) {
      seen.add(key);
      return `${key}=${serializeValue(updates[key])}`;
    }
    return line;
  });
  const appended = [];
  for (const k of keys) {
    if (!seen.has(k)) {
      appended.push(`${k}=${serializeValue(updates[k])}`);
    }
  }
  if (appended.length) {
    out.push('', '# === Updated by Admin Settings (dev) ===', ...appended);
  }
  return out.join('\n');
}

export async function POST(request) {
  const session = await getServerSession(authOptions);
  if (!session || session.user?.type !== 'admin') {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  // Disallow in production/serverless (e.g., Vercel)
  if (process.env.VERCEL === '1' || process.env.NODE_ENV === 'production') {
    return NextResponse.json({ error: 'Writing .env is not allowed in production. Use your hosting env dashboard.' }, { status: 405 });
  }

  const { updates } = await request.json();
  if (!updates || typeof updates !== 'object' || !Object.keys(updates).length) {
    return NextResponse.json({ error: 'Invalid updates payload' }, { status: 400 });
  }

  try {
    const envPath = path.join(process.cwd(), '.env');
    let content = '';
    try {
      content = fs.readFileSync(envPath, 'utf8');
    } catch (_) {
      // create minimal base if missing
      content = '# Generated by Admin Settings\n';
    }
    const updated = updateEnvContent(content, updates);
    fs.writeFileSync(envPath, updated, 'utf8');
    return NextResponse.json({ success: true });
  } catch (e) {
    return NextResponse.json({ error: e?.message || 'Failed to write .env' }, { status: 500 });
  }
}


